/*
 *  This file is part of Track & Graph
 *
 *  Track & Graph is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Track & Graph is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Track & Graph.  If not, see <https://www.gnu.org/licenses/>.
 */

import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
    id 'com.google.devtools.ksp'
    id "androidx.navigation.safeargs.kotlin"
    id "dagger.hilt.android.plugin"
    id "kotlin-parcelize"
    alias libs.plugins.compose.compiler
}

apply from: 'gradle/lua-tasks.gradle.kts'

android {
    compileSdkVersion libs.versions.androidSdk.get().toInteger()

    compileOptions {
        sourceCompatibility = JavaVersion.toVersion(libs.versions.jdk.get())
        targetCompatibility = JavaVersion.toVersion(libs.versions.jdk.get())
    }

    kotlin {
        jvmToolchain(libs.versions.jdk.get().toInteger())

        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_17)
            optIn.add("kotlin.RequiresOptIn")
        }
    }

    defaultConfig {
        applicationId "com.samco.trackandgraph"
        minSdkVersion libs.versions.minSdk.get().toInteger()
        targetSdkVersion libs.versions.targetSdk.get().toInteger()
        //If the backup file is not backwards compatible after this update, upgrade the major version number!
        versionCode 700000
        versionName "7.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix = ".debug"
            resValue "string", "app_name", "Debug Track & Graph"
            manifestPlaceholders = [
                    ALLOW_CLEAR_TEXT       : "false",
                    NETWORK_SECURITY_CONFIG: "@xml/debug_network_security_config"
            ]
        }
        debugMinify {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix = ".debug.minify"
            resValue "string", "app_name", "Debug Minify Track & Graph"
            signingConfig signingConfigs.debug
            manifestPlaceholders = [
                    ALLOW_CLEAR_TEXT       : "false",
                    NETWORK_SECURITY_CONFIG: "@xml/production_network_security_config"
            ]
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "Track & Graph"
            ndk.debugSymbolLevel = "SYMBOL_TABLE"
            manifestPlaceholders = [
                    ALLOW_CLEAR_TEXT       : "false",
                    NETWORK_SECURITY_CONFIG: "@xml/production_network_security_config"
            ]
        }
    }

    buildFeatures {
        dataBinding true
        compose true
    }

    // Dependency info blocks may present a security vulnerability in some cases and they are not
    // required for APK builds e.g. F-Droid builds. However they may contain useful info for
    // debugging issues on the Google Play Store.
    dependenciesInfo {
        // Disables dependency metadata when building APKs (for IzzyOnDroid/F-Droid)
        includeInApk = false
        // Enables dependency metadata when building Android App Bundles (for Google Play)
        includeInBundle = true
    }

    namespace 'com.samco.trackandgraph'
}

tasks.withType(Test).configureEach {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":functions")

    implementation libs.kotlin.reflect
    implementation libs.androidx.legacy.support.v4

    //Dependency Injection
    implementation libs.hilt.android
    ksp libs.hilt.compiler
    ksp(libs.androidx.hilt.compiler)
    implementation libs.hilt.navigation.compose

    //Lua
    implementation libs.luak.jvm

    //UI
    implementation libs.androidx.cardview

    implementation libs.compose.ui
    implementation libs.compose.ui.tooling
    implementation libs.compose.material.icons
    implementation libs.compose.foundation
    implementation libs.compose.ui.viewbinding
    implementation libs.androidx.activity.compose
    implementation libs.lifecycle.viewmodel.compose
    implementation libs.lifecycle.runtime.compose
    implementation libs.compose.runtime.livedata
    // Material design stuff you might need at some point
    implementation libs.compose.material3
    implementation libs.accompanist.pager

    // Reorderable drag and drop
    implementation libs.reorderable
    
    // Glance for widgets
    implementation libs.glance.appwidget
    implementation libs.glance.material3
    implementation libs.glance.appwidget.preview
    implementation libs.glance.preview

    // Android KTX
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.fragment.ktx

    //Navigation
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx

    //Lifecycle extensions
    implementation libs.androidx.lifecycle.extensions

    // Coroutines
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android

    //Graph drawing
    implementation libs.androidplot.core
    implementation libs.flexbox

    //Work manager
    implementation libs.hilt.work
    implementation libs.androidx.work.runtime.ktx

    // Moshi for JSON serialization
    implementation libs.moshi.kotlin
    ksp libs.moshi.kotlin.codegen

    //Testing
    testImplementation libs.threetenbp
    testImplementation libs.junit
    testImplementation libs.mockito.kotlin
    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.androidx.core.testing
}
