/*
 *  This file is part of Track & Graph
 *
 *  Track & Graph is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Track & Graph is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Track & Graph.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
    id 'com.google.devtools.ksp'
    id "androidx.navigation.safeargs.kotlin"
    id "dagger.hilt.android.plugin"
}

android {
    compileSdk 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
        //Using experimental kotlin co-routines api's
        freeCompilerArgs += [
                "-opt-in=kotlin.RequiresOptIn",
                // The below option is here because of this issue: https://github.com/Kotlin/kotlinx.serialization/issues/2145
                "-Xstring-concat=inline"
        ]
    }

    defaultConfig {
        applicationId "com.samco.trackandgraph"
        minSdkVersion 23
        targetSdkVersion 34
        //If the backup file is not backwards compatible after this update, upgrade the major version number!
        versionCode 400003
        versionName "4.0.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix = ".debug"
            resValue "string", "app_name", "Debug Track & Graph"
        }
        debugMinify {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix = ".debug.minify"
            resValue "string", "app_name", "Debug Minify Track & Graph"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "Track & Graph"
            ndk.debugSymbolLevel = "SYMBOL_TABLE"
        }
    }

    buildFeatures {
        dataBinding true
        compose true
    }

    //If you get an error about compose not supporting your kotlin compiler version
    // you might need to look into this:
    //https://developer.android.com/jetpack/androidx/releases/compose-kotlin
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.14"
    }

    namespace 'com.samco.trackandgraph'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":functions")

    implementation libs.kotlin.reflect
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.legacy.support.v4

    //lua
    implementation 'com.soywiz.korlibs.luak:luak-jvm:3.4.0'


    //Dependency Injection
    implementation libs.hilt.android
    ksp libs.hilt.compiler
    ksp(libs.androidx.hilt.compiler)
    implementation libs.hilt.navigation.compose

    //UI
    implementation libs.androidx.cardview
    implementation libs.androidx.recyclerview

    implementation libs.compose.ui
    implementation libs.compose.ui.tooling
    implementation libs.compose.foundation
    implementation libs.compose.ui.viewbinding
    implementation libs.androidx.activity.compose
    implementation libs.lifecycle.viewmodel.compose
    implementation libs.lifecycle.runtime.compose
    implementation libs.compose.runtime.livedata
    // Material design stuff you might need at some point
    implementation libs.compose.material
    implementation libs.compose.theme.adapter
    implementation libs.accompanist.pager

    // Android KTX
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.fragment.ktx

    //Navigation
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx

    //Lifecycle extensions
    implementation libs.androidx.lifecycle.extensions

    // Coroutines
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android

    //Graph drawing
    implementation libs.androidplot.core
    implementation libs.flexbox

    //Work manager
    implementation libs.hilt.work
    implementation libs.androidx.work.runtime.ktx

    //Testing
    testImplementation libs.threetenbp
    testImplementation libs.junit
    testImplementation libs.mockito.kotlin
    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.androidx.core.testing
}
