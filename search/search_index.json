{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Track &amp; Graph","text":"<p>Welcome to the Track &amp; Graph docs site. </p> <p>To get started learning about Track &amp; Graph take a look at the tutorial.</p> <p>You can also check out the project on GitHub or the Google Play Store.</p>"},{"location":"lua/community/","title":"Community Scripts","text":""},{"location":"lua/community/#line-graphs","title":"Line Graphs","text":"<ul> <li>Merge Inputs: Plots all provided data sources in a single line where all datapoints are sorted by their timestamp.</li> <li>Cumulative: Generates a cumulative line graph from the provided data sources.</li> <li>Difference: Generates a line graph that shows the difference between each tracked value from the previous value for each provided data source.</li> </ul>"},{"location":"lua/community/#bar-charts","title":"Bar Charts","text":"<ul> <li>Cumulative: Generates a cumulative bar chart from the provided data source.</li> <li>Merge Inputs: Plots all provided data sources in a single bar chart where all data points are sorted by their timestamp.</li> </ul>"},{"location":"lua/community/#text","title":"Text","text":"<ul> <li>Total this period: Displays the total value from the provided data sources for a fixed time period (e.g., this week from Monday to Sunday, this month from 1st to last day).</li> <li>Total in Last Duration: Displays the total value from the provided data sources over a rolling time window (e.g., last 7 days, last 24 hours, last 30 days).</li> <li>Fraction: Displays a fraction representing the ratio of values with specified labels to total values. </li> <li>Average in duration: Calculates the average value of a data source over a specified duration, such as the last 24 hours or the last week.</li> </ul>"},{"location":"lua/community/#datapoint","title":"Datapoint","text":"<ul> <li>Last Value Above Threshold: Returns the last datapoint with a value above a given threshold. It can accept multiple data sources.</li> <li>Last Value Below Threshold: Returns the last datapoint with a value below a given threshold. It can accept multiple data sources.</li> </ul>"},{"location":"lua/community/#pie-charts","title":"Pie Charts","text":"<ul> <li>Moving Pie Chart: Merges all given data sources into one pie chart including all data, or all data in the given period prior to now.</li> <li>Periodic Pie Chart: Displays data for a specific time period such as the current day, week, month, etc. The pie chart resets at the beginning of each new period and accumulates data throughout that period. This script can accept multiple data sources and merges them all into one pie chart.</li> </ul>"},{"location":"lua/community/bar-charts/cumulative/","title":"Cumulative Bar Chart Script","text":"<p>This script expects a single data source and generates a cumulative bar chart.</p>"},{"location":"lua/community/bar-charts/cumulative/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>local core = require(\"tng.core\")\nlocal graph = require(\"tng.graph\")\n-- Optional period of data to be displayed e.g. core.PERIOD.WEEK to only show 1 week of data\nlocal period = nil\n-- Optional integer value used with period e.g. 5\nlocal period_multiplier = nil\n-- If from_now is false the end of the graph will be the last datapoint, otherwise it's the current date/time\nlocal from_now = false\n-- Totalling period used to calculate 'plot totals'\nlocal totalling_period = core.PERIOD.DAY\n-- Optional boolean to count by label. If true, each datapoint counts as 1, and the value is ignored\nlocal count_by_label = false\n-- Optional totalling period multiplier used to calculate 'plot totals' e.g. 2\nlocal totalling_period_multiplier = nil\n-- Optional colors list, e.g. { label: \"#FF00FF\", label2: \"#0000FF\", label3: core.COLOR.BLUE_SKY }\nlocal label_colors = nil\n-- Optional if the y axis represents time\nlocal duration_based_range = false\n-- Optional max for the y axis e.g. 100\nlocal y_max = nil\n</code></pre> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/bar-charts/merge-inputs/","title":"Merge Inputs","text":"<p>Plots all provided data sources in a single bar chart where all data points are sorted by their timestamp.</p>"},{"location":"lua/community/bar-charts/merge-inputs/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>local core = require(\"tng.core\")\nlocal graph = require(\"tng.graph\")\n-- Optional period of data to be displayed e.g. core.PERIOD.WEEK to only show 1 week of data\nlocal period = nil\n-- Optional integer value used with period e.g. 5\nlocal period_multiplier = nil\n-- If from_now is false the end of the graph will be the last datapoint, otherwise it's the current date/time\nlocal from_now = false\n-- Totalling period used to calculate 'plot totals'\nlocal totalling_period = core.PERIOD.DAY\n-- Optional totalling period multiplier used to calculate 'plot totals' e.g. 2\nlocal totalling_period_multiplier = nil\n-- Optional boolean to count by label. If true, each datapoint counts as 1, and the value is ignored\nlocal count_by_label = false\n-- Optional colors list, e.g. { label: \"#FF00FF\", label2: \"#0000FF\", label3: core.COLOR.BLUE_SKY }\nlocal label_colors = nil\n-- Optional if the y axis represents time\nlocal duration_based_range = false\n-- Optional max for the y axis e.g. 100\nlocal y_max = nil\n</code></pre> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/datapoint/last-value-above-threshold/","title":"Last Value Above Threshold","text":"<p>This script returns the last datapoint with a value above a given threshold. It can accept multiple data sources.</p>"},{"location":"lua/community/datapoint/last-value-above-threshold/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>-- The threshold above which the last value is returned\nlocal threshold = 0\n</code></pre> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/datapoint/last-value-below-threshold/","title":"Last Value Below Threshold","text":"<p>This script returns the last datapoint with a value below a given threshold. It can accept multiple data sources.</p>"},{"location":"lua/community/datapoint/last-value-below-threshold/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>-- The threshold below which the last value is returned\nlocal threshold = 0\n</code></pre> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/line-graphs/cumulative/","title":"Cumulative Line Graph Script","text":"<p>This script generates a cumulative line graph for each of the provided data sources.</p>"},{"location":"lua/community/line-graphs/cumulative/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>local core = require(\"tng.core\")\nlocal graph = require(\"tng.graph\")\n-- Optional period of data to be displayed e.g. core.PERIOD.WEEK to only show 1 week of data\nlocal period = nil\n-- Optional integer value used with period e.g. 5\nlocal period_multiplier = 8\n-- If from_now is false the end of the graph will be the last datapoint, otherwise it's the current date/time\nlocal from_now = false\n-- Optional colors list, e.g. {\"#FF00FF\", \"#0000FF\", core.COLOR.BLUE_SKY}\nlocal line_colors = nil\n-- Optional point style e.g. graph.LINE_POINT_STYLE.CIRCLE\nlocal line_point_style = nil\n-- Optional string labels for the lines in the legend, e.g. [\"My data 1\", \"My data 2\"]\nlocal line_labels = nil\n-- Optional integer value used to average data points over a certain duration e.g. core.DURATION.DAY * 30 for a 30 day moving average\nlocal averaging_duration = nil\n-- Optional totalling period used to calculate 'plot totals' e.g. core.PERIOD.WEEK\nlocal totalling_period = nil\n-- Optional totalling period multiplier used to calculate 'plot totals' e.g. 2\nlocal totalling_period_multiplier = nil\n-- Optional if the y axis represents time\nlocal duration_based_range = false\n-- Optional bounds for the y axis e.g. { min = 0, max = 100 }\nlocal range_bounds = nil\n</code></pre> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/line-graphs/difference/","title":"Difference Graph","text":"<p>This script generates a line graph that shows the difference between each tracked value from the previous value for each provided data source.</p>"},{"location":"lua/community/line-graphs/difference/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>local core = require(\"tng.core\")\nlocal graph = require(\"tng.graph\")\n-- Optional period of data to be displayed e.g. core.PERIOD.WEEK to only show 1 week of data\nlocal period = nil\n-- Optional integer value used with period e.g. 5\nlocal period_multiplier = 8\n-- If from_now is false the end of the graph will be the last datapoint, otherwise it's the current date/time\nlocal from_now = false\n-- Optional colors list, e.g. {\"#FF00FF\", \"#0000FF\", core.COLOR.BLUE_SKY}\nlocal line_colors = nil\n-- Optional point style e.g. graph.LINE_POINT_STYLE.CIRCLE\nlocal line_point_style = nil\n-- Optional string labels for the lines in the legend, e.g. [\"My data 1\", \"My data 2\"]\nlocal line_labels = nil\n-- Optional integer value used to average data points over a certain duration e.g. core.DURATION.DAY * 30 for a 30 day moving average\nlocal averaging_duration = nil\n-- Optional totalling period used to calculate 'plot totals' e.g. core.PERIOD.WEEK\nlocal totalling_period = nil\n-- Optional totalling period multiplier used to calculate 'plot totals' e.g. 2\nlocal totalling_period_multiplier = nil\n-- Optional if the y axis represents time\nlocal duration_based_range = false\n-- Optional bounds for the y axis e.g. { min = 0, max = 100 }\nlocal range_bounds = nil\n</code></pre> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/line-graphs/merge-inputs/","title":"Merge Inputs","text":"<p>Plots all provided data sources in a single line where all datapoints are sorted by their timestamp.</p>"},{"location":"lua/community/line-graphs/merge-inputs/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>-- Optional period of data to be displayed e.g. core.PERIOD.WEEK to only show 1 week of data\nlocal period = nil\n-- Optional integer value used with period e.g. 5\nlocal period_multiplier = 8\n-- If from_now is false the end of the graph will be the last datapoint, otherwise it's the current date/time\nlocal from_now = false\n-- Optional color, e.g. \"#FF00FF\" or core.COLOR.BLUE_SKY\nlocal line_color = nil\n-- Optional point style e.g. graph.LINE_POINT_STYLE.CIRCLE\nlocal line_point_style = nil\n-- Optional string label for the line in the legend, e.g. \"Data\"\nlocal line_label = nil\n-- Optional integer value used to average data points over a certain duration e.g. core.DURATION.DAY * 30 for a 30 day moving average\nlocal averaging_duration = nil\n-- Optional totalling period used to calculate 'plot totals' e.g. core.PERIOD.WEEK\nlocal totalling_period = nil\n-- Optional totalling period multiplier used to calculate 'plot totals' e.g. 2\nlocal totalling_period_multiplier = nil\n</code></pre> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/pie-charts/moving-pie-chart/","title":"Moving Pie Chart","text":"<p>A pie chart that merges all given data sources into one pie chart including all data, or all data in the given period prior to now.</p>"},{"location":"lua/community/pie-charts/moving-pie-chart/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>local period = nil\n-- Optional integer value used with period e.g. 5\nlocal period_multiplier = nil\n-- Optional colors list, e.g. { label: \"#FF00FF\", label2: \"#0000FF\", label3: core.COLOR.BLUE_SKY }\nlocal label_colors = nil\n-- Boolean to count by label. If true, each datapoint counts as 1, and the value is ignored\nlocal count_by_label = false\n</code></pre> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/pie-charts/periodic-pie-chart/","title":"Periodic Pie Chart","text":"<p>A pie chart that displays data for a specific time period such as the current day, week, month, etc. The pie chart resets at the beginning of each new period and accumulates data throughout that period. This script can accept multiple data sources and merges them all into one pie chart.</p>"},{"location":"lua/community/pie-charts/periodic-pie-chart/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>-- Period of data to be displayed e.g. core.PERIOD.WEEK to show data for this week\nlocal period = core.PERIOD.WEEK\n-- Optional colors list, e.g. { label=\"#FF00FF\", label2=\"#0000FF\", label3=core.COLOR.BLUE_SKY }\nlocal label_colors = nil\n-- Boolean to count by label. If true, each datapoint counts as 1, and the value is ignored\nlocal count_by_label = false\n</code></pre> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/text/average-in-duration/","title":"Average in Duration","text":"<p>Shows the average of all data points from all data sources combined over a specified duration prior to now. This is a moving average that calculates the mean of all values within the duration window, not bounded by calendar periods. For example, the average over the last 7 days, or the average over the last 30 days from the current moment.</p>"},{"location":"lua/community/text/average-in-duration/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>-- Duration of data to average over prior to now (moving average)\n-- e.g. core.DURATION.DAY * 7 for average over last 7 days\nlocal duration = core.DURATION.DAY * 7\n</code></pre>"},{"location":"lua/community/text/average-in-duration/#examples","title":"Examples","text":"<ul> <li><code>core.DURATION.DAY * 7</code> - Average over the last 7 days</li> <li><code>core.DURATION.DAY * 30</code> - Average over the last 30 days  </li> <li><code>core.DURATION.HOUR * 24</code> - Average over the last 24 hours</li> <li><code>core.DURATION.DAY * 1</code> - Average over the last 1 day</li> </ul>"},{"location":"lua/community/text/average-in-duration/#key-features","title":"Key Features","text":"<ul> <li>Moving Average: Calculates average from now backwards by the specified duration, not calendar-based periods</li> <li>Multi-Source: Combines all data points from all configured data sources into a single average</li> <li>Precision: Results are rounded to 2 decimal places for clean display</li> </ul> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/text/fraction/","title":"Fraction Text Display","text":"<p>This script displays a fraction representing the ratio of values with specified labels to total values. </p>"},{"location":"lua/community/text/fraction/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>-- Optional period of data to be displayed e.g. core.PERIOD.WEEK to show data for this week\nlocal period = nil\n-- Optional integer value used with period e.g. 5\nlocal period_multiplier = nil\n-- Optional boolean to count by label. If true, each datapoint counts as 1, and the value is ignored\nlocal count_by_label = false\n-- Optional fixed denominator value e.g. 100\nlocal fixed_denominator = nil\n-- The list of labels to be counted as part of the numerator\nlocal numerator_labels = {}\n-- A list of labels to be ignored i.e. not counted as part of the numerator or denominator\nlocal ignored_labels = nil\n</code></pre> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/text/total-in-last-duration/","title":"Total in Last Duration","text":"<p>Shows the total of a given input over a rolling time window extending backwards from the current moment. For example: - \"Total in last 24 hours\" shows data from exactly 24 hours ago until now - \"Total in last 7 days\" shows data from exactly 7 days ago until now  </p> <p>If multiple data sources are given then the total of each data source is shown separately, as well as the overall total.</p>"},{"location":"lua/community/text/total-in-last-duration/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>-- Duration of data to total over prior to now (rolling window)\n-- e.g. core.DURATION.DAY for total in last day\nlocal duration = core.DURATION.DAY\n\n-- Multiplier for the duration (e.g. 7 for last 7 days when duration is DAY)\nlocal multiplier = 7\n\n-- Text size (1=small, 2=medium, 3=large). If nil, uses smart defaults.\nlocal text_size = nil\n</code></pre> <p>Available duration units: - <code>core.DURATION.HOUR</code> - Hours - <code>core.DURATION.DAY</code> - Days - <code>core.DURATION.WEEK</code> - Weeks - <code>core.DURATION.MONTH</code> - Months</p> <p>Smart defaults for text size: - Single data source: Large text (size 3) - Multiple data sources: Medium text (size 2) for better readability - Override: Use specified size for all cases</p> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/community/text/total-this-period/","title":"Total this period","text":"<p>Shows the total of a given input over a specified period of time from the beginning of that period. For example: - \"Total this week\" shows data from Monday 00:00 to Sunday 23:59 of the current week - \"Total this month\" shows data from the 1st day 00:00 to the last day 23:59 of the current month - \"Total this day\" shows data from 00:00 to 23:59 of today</p> <p>If multiple data sources are given then the total of each data source is shown separately, as well as the overall total.</p>"},{"location":"lua/community/text/total-this-period/#configuration","title":"Configuration","text":"<p>This script accepts the following configuration parameters:</p> <pre><code>-- Period of data to be displayed e.g. core.PERIOD.WEEK to show data for this week\nlocal period = core.PERIOD.WEEK\n\n-- Multiplier for the period (e.g. 2 for this 2 weeks when period is WEEK)\nlocal multiplier = 1\n\n-- Text size (1=small, 2=medium, 3=large). If nil, uses smart defaults.\nlocal text_size = nil\n</code></pre> <p>Available period units: - <code>core.PERIOD.DAY</code> - Days - <code>core.PERIOD.WEEK</code> - Weeks - <code>core.PERIOD.MONTH</code> - Months - <code>core.PERIOD.YEAR</code> - Years</p> <p>The multiplier allows you to extend periods beyond single units. For example: - <code>period = core.PERIOD.WEEK, multiplier = 2</code> shows \"this 2 weeks\" - <code>period = core.PERIOD.MONTH, multiplier = 3</code> shows \"this 3 months\"</p> <p>Smart defaults for text size: - Single data source: Large text (size 3) - Multiple data sources: Medium text (size 2) for better readability - Override: Use specified size for all cases</p> <p>Install via deeplink</p> <p>Read the full script</p> <p>Author: SamAmco</p>"},{"location":"lua/developer-guide/intro/","title":"Lua Developer Guide","text":""},{"location":"lua/developer-guide/intro/#introduction","title":"Introduction","text":"<p>This guide is for people who are interested in writing their own Lua graph scripts. If you just want a reference for how to use the Lua graph feature in the app then check out the tutorial here.</p> <p>Throughout this guide I will assume some basic experience with programming. There are plenty of resources out there to help you get started if you need to build that foundation first.</p> <p>If you don't know Lua, don't worry - it is a very simple and easy language to learn. If you already have some experience with programming and just want a quick guide to the syntax, then you can read the guide over at learnxinyminutes.com/lua in around 15-20 minutes. For more comprehensive learning, see the official Lua documentation (however please keep in mind the limitations below). If you are comfortable with Lua you may want to just take a look at the examples in the community scripts. Each one has a link to the source code and they are generally quite short and readable.</p>"},{"location":"lua/developer-guide/intro/#setting-up-your-environment","title":"Setting up your environment","text":"<p>Before you can start writing any scripts you need to set up a development environment. You can use any text editor but I recommend finding an IDE that you like that supports Lua. Lua supports LSP so there are  many IDE's  out there that work well out of the box.</p> <p>Once you have an editor you need to create a new directory somewhere to work in e.g.</p> <pre><code>mkdir my_workspace\ncd my_workspace\n</code></pre> <p>Then clone the API source code from the repository: <pre><code>curl -L https://github.com/SamAmco/track-and-graph/archive/refs/heads/master.zip -o master.zip \\\n&amp;&amp; unzip master.zip \"track-and-graph-master/lua/src/*\" \\\n&amp;&amp; mv track-and-graph-master/lua/src/* . \\\n&amp;&amp; rm -rf track-and-graph-master master.zip\n</code></pre></p> <p>(This command is ultimately just getting all of the  files and folders here  and copying them to your current directory.)</p> <p>Now create a new Lua script file in the root of your workspace directory to write your code in e.g.</p> <pre><code>nvim my_script.lua\n</code></pre> <p>Your IDE should now recognise the Track &amp; Graph API and give you code completion hints when you type something like: </p> <pre><code>require(\"tng.core\").\n</code></pre>"},{"location":"lua/developer-guide/intro/#writing-your-first-script","title":"Writing your first script","text":"<p>To get started let's write and save a super simple script: </p> <pre><code>return require(\"tng.graph\").text(\"Hello world!\")\n</code></pre> <p>Now is a good time to figure out your development flow for testing the script on your device. If you have an easy way to copy and paste text between devices you can use the paste button in the Lua graph configuration. You can also save your workspace to a shared cloud directory or send the file to your device some other way and access it using the file button.</p> <p>If you load that script into the Lua graph configuration you should see a simple text graph with the words \"Hello world!\" in it like this: </p> <p></p>"},{"location":"lua/developer-guide/intro/#understanding-the-script","title":"Understanding the script","text":"<p>Let's break down what is going on here. First we are using the <code>require</code> function to load the <code>tng.graph</code> module. This module contains all of the functions that you can use to create graphs. The <code>text</code> function creates a simple text graph. Let's take a look at the definition of that function:</p> <pre><code>--- Creates a text graph.\n--- @since v5.1.0\n--- @param params (string|number|TextGraphParams): Either the text to display or the parameters for the text graph.\n--- @return table: A table representing the text graph.\nM.text = function(params)\n    if type(params) ~= \"table\" then\n        return {\n            type = M.GRAPH_TYPE.TEXT,\n            text = params,\n        }\n    end\n    return {\n        type = M.GRAPH_TYPE.TEXT,\n        text = params.text,\n        size = params.size,\n        align = params.align,\n    }\nend\n</code></pre> <p>Essentially this function takes a string, number, or a table of parameters and returns a table that represents the graph. The table contains a <code>type</code> field that tells the app what type of graph it is, and then any other parameters that are needed to create the graph. In this case we are just passing in a string, so the function creates a table with the <code>type</code> field set to <code>GRAPH_TYPE.TEXT</code> and the <code>text</code> field set to the string we passed in.</p> <p>So our script ultimately returned a table that looks like this:</p> <pre><code>{\n  type = \"TEXT\",\n  text = \"Hello world!\",\n}\n</code></pre> <p>Notice you could get the same result by writing your script like this:</p> <pre><code>local graph = require(\"tng.graph\")\n\nreturn {\n  type = graph.GRAPH_TYPE.TEXT,\n  text = \"Hello world!\",\n}\n</code></pre> <p>Whenever Track &amp; Graph needs to generate the view data for your Lua graph it will call the script and use the returned table to create the graph. For example your script is run to generate the preview in the Lua graph configuration screen, and whenever you open the group that contains your Lua graph.</p>"},{"location":"lua/developer-guide/intro/#what-graphs-can-i-create","title":"What graphs can I create?","text":"<p>Returning to the tng/graph.lua file notice the params object references the class name TextGraphParams. If you look further up the file you will find the definition of that class:</p> <pre><code>--- @since v5.1.0\n--- @class TextGraphParams\n--- @field text (string|number): The text to display.\n--- @field size? integer: 1-3 The size of the text small, medium or large. Defaults to large.\n--- @field align? string: start, centre, or end The alignment of the text. Defaults to centre.\n</code></pre> <p>Note that a parameter with a <code>?</code> after it means that it is optional. If you don't provide a value for that parameter, the function will use a default value. </p> <p>You can also see the other types of graphs you can return and the parameters they expect in this file, they are: </p> <ul> <li>Text</li> <li>Data Point</li> <li>Time Bar charts (but not Histograms currently)</li> <li>Line Graphs</li> <li>Pie Charts</li> </ul> <p>For further inspiration I recommend checking out the community scripts.</p>"},{"location":"lua/developer-guide/intro/#using-data-sources","title":"Using data sources","text":"<p>A Lua graph script can actually return one of two things. It can return a table with the data in it as we've seen above, or it can return a function which accepts a table of named data sources. Track &amp; Graph will then:</p> <ol> <li>Execute the script to get it's return value (in this case a function).</li> <li>Realise that the return value is a function and call it, passing in the data sources configured in the app.</li> <li>Use the return value of that function to create the graph.</li> </ol> <p>For example if you were to configure your Lua graph with a data source that contains at least one data point like this:</p> <p></p> <p>Then you could use the following script to return the most recent data point from that data source:</p> <pre><code>return function(sources)\n  return {\n    type = require(\"tng.graph\").GRAPH_TYPE.DATA_POINT,\n    datapoint = sources[\"my_data_source\"].dp(),\n  }\nend\n</code></pre> <p>Here <code>sources[\"my_data_source\"]</code> is actually returning a <code>DataSource</code> object. Take a look at the <code>tng/core.lua</code> file to see the definition of this class and what other functions are available on it. Notice the definition of this function is empty:</p> <pre><code>--- Fetches the next data point from the data source.\n--- Data points are iterated in reverse chronological order.\n--- @since v5.1.0\n--- @return DataPoint\nfunction DataSource:dp() end\n</code></pre> <p>That's because the implementation of this data source is actually written in the kotlin code of the android app.  You can see that here  if you are interested but it is not necessary to read the kotlin code.</p>"},{"location":"lua/developer-guide/intro/#scripting-limitations","title":"Scripting limitations","text":"<p>There are a few limitations to be aware of when writing Lua scripts: </p> <ul> <li>Lua graph scripts are single files and they can not require or use symbols from other files except those that are provided by the Track &amp; Graph API.</li> <li>The Lua engine under the hood is LuaK which is a Kotlin port of LuaJ based on Lua 5.2.x so language features should be compatible with that version of Lua.</li> <li>Some of the core api's have been stripped out for safety. For example:<ul> <li><code>dofile</code></li> <li><code>loadfile</code></li> <li><code>pcall</code></li> <li><code>xpcall</code></li> <li><code>package</code></li> </ul> </li> </ul> <p>In general your scripts should not try to access the OS to run commands, network requests, or access the file system.</p>"},{"location":"lua/developer-guide/intro/#script-previews","title":"Script previews","text":"<p>If you have downloaded any of the community scripts you may have noticed that only the configuration parameters of the script are immediately visible. This is because the script preview will only show the code between the comments:</p> <pre><code>--- PREVIEW_START\n</code></pre> <p>and </p> <pre><code>--- PREVIEW_END\n</code></pre> <p>You can use this to make the most important information about your script immediately visible like the name of the script and any configuration parameters e.g.</p> <pre><code>--- PREVIEW_START\n-- Script: Text - Total This Period\n-- Period of data to be displayed e.g. core.PERIOD.WEEK to show data for this week\nlocal period = core.PERIOD.WEEK\n--- PREVIEW_END\n</code></pre>"},{"location":"lua/developer-guide/intro/#contributing-to-the-community-scripts","title":"Contributing to the community scripts","text":"<p>You already have all the tools you need to write and run your own scripts. If you create something you think is very useful and you want to share it with the community, you can create a PR into the Track &amp; Graph repository. However community scripts will require a few more things before they can be committed to the repository. To give you an idea of what's required you can see the  other community scripts and their accompanying files here. In general you will need 4 things: </p> <ol> <li>A README.md file that describes the script and how to use it</li> <li>A screenshot of the graph that the script generates</li> <li>A test file, or multiple test files, that contain the test cases for the script</li> <li>The script file that contains the code</li> </ol>"},{"location":"lua/developer-guide/intro/#writing-tests","title":"Writing tests","text":"<p>Writing tests is important not only to ensure your code works as expected (particularly around edge cases) but also to make sure that your script continues to work as the Track &amp; Graph API evolves. If your script relies on some implementation detail or method call in the Track &amp; Graph Lua API, and that function changes in a future version, then your script may be left broken without anyone noticing except disgruntled users.</p>"},{"location":"lua/developer-guide/intro/#the-testing-framework","title":"The testing framework","text":"<p>Track &amp; Graph provides a testing framework for Lua scripts that runs your tests in the same Lua environment that's used in the production app. This gives greater assurances that if your tests pass, your script will work correctly in the actual app.</p> <p>You can create as many test files as you like for your script as long as each one starts with the word test and ends with .lua. For example, if your script is called <code>my_script.lua</code>, you could create a test file called <code>test_my_script.lua</code> or just <code>test.lua</code>. The test files should be placed in the same directory as your script. A test file is a Lua module that returns a table of test cases. Each test case specifies:</p> <ol> <li>Configuration overrides</li> <li>A set of named mock data sources</li> <li>Assertions to validate the script's output</li> </ol> <p>Here's a simple example of a test file:</p> <pre><code>local M = {}\nlocal test = require(\"test.core\")\n\nM.test_simple_case = {\n  -- Configuration overrides for your script\n  config = {\n    period = \"core.PERIOD.WEEK\",\n  },\n\n  -- Function that returns mock data sources\n  sources = function()\n    return {\n      my_source = {\n        { timestamp = 1620000000, value = 10 },\n        { timestamp = 1620086400, value = 20 },\n      }\n    }\n  end,\n\n  -- Function that validates the result\n  assertions = function(result)\n    test.assertEquals(30, result.text)\n  end,\n}\n\nreturn M\n</code></pre>"},{"location":"lua/developer-guide/intro/#creating-test-cases","title":"Creating test cases","text":"<p>Each test should be defined as a field in your module's table. The value should be a table with the following fields:</p>"},{"location":"lua/developer-guide/intro/#1-config-table","title":"1. <code>config</code> (table)","text":"<p>The <code>config</code> table contains values that will override variables in your script. For example, if your script defines <code>local period = core.PERIOD.MONTH</code>, your test can override it with <code>local period = core.PERIOD.WEEK</code>. Notice that the configuration overrides always use strings and not references to the values themselves. e.g. <code>\"core.PERIOD.WEEK\"</code> rather than <code>core.PERIOD.WEEK</code>. That's because the testing framework actually just uses a regex to overwrite the first declaration matching the config name in your script before executing it.</p>"},{"location":"lua/developer-guide/intro/#2-sources-function","title":"2. <code>sources</code> (function)","text":"<p>The <code>sources</code> function should return a table of mock data sources that will be passed to your script. Each source is a table of data points with <code>timestamp</code> and <code>value</code> fields:</p> <pre><code>sources = function()\n  local core = require(\"tng.core\")\n  local now = core.time().timestamp\n\n  return {\n    -- First data source named \"steps\"\n    steps = {\n      { timestamp = now - 86400, value = 5000 },\n      { timestamp = now - 172800, value = 7500 },\n    },\n    -- Second data source named \"calories\"\n    calories = {\n      { timestamp = now - 86400, value = 300 },\n      { timestamp = now - 172800, value = 450 },\n    }\n  }\nend\n</code></pre>"},{"location":"lua/developer-guide/intro/#3-assertions-function","title":"3. <code>assertions</code> (function)","text":"<p>The <code>assertions</code> function receives the result of your script and should validate that it's correct using the test utility functions:</p> <pre><code>assertions = function(result)\n  local test = require(\"test.core\")\n  test.assertEquals(12500, result.text)\n  test.assert(result.type == require(\"tng.graph\").GRAPH_TYPE.TEXT)\nend\n</code></pre> <p>Currently there are only two assertion functions available: <code>assertEquals</code> and <code>assert</code>. The assertEquals function will convert the left and right side to strings and compare string equality. </p> <p>It is also valid to use the error function to throw an error if the test fails. For example:</p> <pre><code>assertions = function(result)\n  if result.text ~= \"Hello world!\" then\n    error(\"Expected 'Hello world!', got '\" .. result.text .. \"'\")\n  end\nend\n</code></pre> <p>For more comprehensive testing examples, see the community script test files which demonstrate common patterns for time-based scenarios, multi-source testing, and edge cases.</p>"},{"location":"lua/developer-guide/intro/#running-tests","title":"Running tests","text":"<p>Since the tests run in the actual Track &amp; Graph Lua engine, you need an Android development environment to run them. You should be ok with just the CLI tools, or you can install Android Studio if you prefer.  You can download those things here. </p> <p>You will also need Track &amp; Graph cloned locally:</p> <pre><code>git clone git@github.com:SamAmco/track-and-graph.git\ncd track-and-graph\n</code></pre> <p>The tests are run using the  CommunityTestRunner.kt  in the Android project. You can run them using the gradlew file inside the repo with:</p> <pre><code>./gradlew :app:testDebugUnitTest --tests \"com.samco.trackandgraph.lua.CommunityTestRunner\"\n</code></pre>"},{"location":"lua/developer-guide/intro/#debugging-tests","title":"Debugging tests","text":"<p>Debugging scripts and tests can be a bit tricky since you will generally have to work without a breakpoint debugger in your Lua code. </p> <p>You can use the <code>error</code> and <code>print</code> functions to help narrow down issues. The <code>print</code> function takes any set of arguments and tries to convert them to strings before printing them to the test output. The following are all valid uses of <code>print</code>:</p> <pre><code>print(\"Hello world!\") -- prints \"Hello world!\"\nprint(123) -- prints \"123\"\nprint({ key = \"value\" }) -- prints e.g. \"table: 1ddd3478\"\nprint(\"Hello \", \"world!\") -- prints \"Hello world!\"\nprint(\"Hello \", 123) -- prints \"Hello 123\"\n</code></pre> <p>Notice that only primitives like strings and numbers will print readably. Tables will not print their contents but instead their memory address, so you need to access their fields to print them effectively.</p> <p>You can use <code>print</code> and <code>error</code> anywhere in your script or test to narrow down issues, but please make sure to remove any <code>print</code> statements before you submit your PR.</p>"},{"location":"policies/privacy-policy/","title":"Privacy Policy","text":"<p>This app does not record any of your personal information, anything you track or anything you do in the app. Nothing is recorded or stored anywhere online by this app or any third party library used by this app. You can however easily backup your data at any time to your own device or cloud storage service from within the app.</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>The tutorials will guide you on how to use Track &amp; Graph step by step.</p> <ul> <li>Get started with tracking</li> <li>Importing and exporting data</li> <li>Creating graphs<ul> <li>Line graphs</li> <li>Pie charts</li> <li>Statistics</li> <li>Time histograms</li> <li>Bar charts</li> <li>Lua graphs</li> </ul> </li> <li>Notes</li> <li>Timestamps</li> </ul>"},{"location":"tutorial/import-export/","title":"Importing and exporting","text":""},{"location":"tutorial/import-export/#csv-import-export","title":"CSV Import &amp; Export","text":"<p>To import/export only the tracked data in a group to a CSV use the menu buttons at the top:</p> <p></p> <p></p> <p>Use this button to import a csv into this group.</p> <p></p> <p>Use this button to export this groups tracked data to a csv.</p>"},{"location":"tutorial/import-export/#backup-restore","title":"Backup &amp; Restore","text":"<p>The Backup &amp; Restore option in the menu is slightly different. This will export and restore the entire database file containing all tracked data, graphs, reminders and notes. </p> <p>It is recommended that you backup your data regularly or configure the auto-backup option.</p> <p>The backup file is an un-encrypted Sqlite3 database file which can also be opened and modified using freely available software. However this is not recommended for non-technical users as you could break the integrity of the database.</p>"},{"location":"tutorial/notes/","title":"Notes","text":"<p>Notes allow you to keep track of qualitative data alongside your quantitative data. There are two types of notes:</p> <ul> <li>Global notes (added directly in the notes menu)</li> <li>Data point notes (attached to specific data points)</li> </ul>"},{"location":"tutorial/notes/#data-point-notes","title":"Data point notes","text":"<p>When adding a data point you may wish to track an important piece of information specific to that data set. For example:</p> <p></p> <p>After adding this note you will notice it shows up in a list underneath any graph of that data set. If you tap the note it will open in a dialog window and a marker will be added to the graph.</p> <p></p>"},{"location":"tutorial/notes/#global-notes","title":"Global notes","text":"<p>However some pieces of information might be relevant to all your data. In this case you can add a global note by tapping the plus button in the global notes menu:</p> <p></p> <p>You will notice this note now shows up underneath all graphs.</p> <p></p>"},{"location":"tutorial/notes/#the-notes-menu","title":"The notes menu","text":"<p>You can edit or delete any note from the notes menu. Deleting a data point note from the notes menu will not delete the data point its self, just the attached note.</p>"},{"location":"tutorial/timestamps/","title":"Timestamps","text":"<p>Sometimes you may notice that a + or - number is appended to your timestamp as in the following:</p> <p></p> <p>This means that this data point was tracked in a different time zone to your current time zone. One common reason for this is that your clock went forward/back for daylight savings. Another reason this might happen is if you tracked the data point in a different country. </p> <p>Essentially what is shown is the time that the clock would have said on your device at the moment you tracked the data point, and then the number of hours you must add or subtract to put it in your current timezone. So if you track a data point in a zone which is 3 hours ahead and then you change your time zone back you will see a (-3) after your data point. </p>"},{"location":"tutorial/tracking/","title":"Get started with tracking","text":"<p>To begin tracking you will need to create a Tracker.</p> <p></p>"},{"location":"tutorial/tracking/#creating-a-tracker","title":"Creating a Tracker","text":"<p>As a minimum you will need to give your tracker a name. You can also optionally add a longer description. The description can later be seen via the context menu of the tracker.</p> <p></p>"},{"location":"tutorial/tracking/#data-point-structure","title":"Data Point Structure","text":"<p>A Tracker holds a list of data points ordered by time. Each data point has the following information:</p> <ul> <li>A timestamp</li> <li>A value </li> <li>An optional label</li> <li>An optional note</li> </ul> <p>The value is usually just a number, but it can also be a time or duration. If you check the box \"This is a time or duration\" you will be asked for values in hours, minutes and seconds and you will be able to start a timer using that tracker. Internally this information is still stored as a number (specifically the total number of seconds tracked).</p> <p>Labels and notes are both text inputs. Labels are useful for categorising data. For example if you wanted to track calories for breakfast, lunch, and dinner, you could track the calories in the value field and the word \"breakfast\", \"lunch\" or \"dinner\" in the label field. Use the note field to add more contextual information like \"Today was my birthday so I ate lots of cake.\"</p> <p></p>"},{"location":"tutorial/tracking/#label-suggestions","title":"Label Suggestions","text":"<p>Any previous labels you have tracked will later appear as buttons on the tracker input dialog. If you press the button the label field is filled with the selected label. If you long press the button a data point is added immediately with that label. Under the advanced tracker settings you can change the behaviour of suggested values slightly. This is explained in more detail further down.</p> <p></p>"},{"location":"tutorial/tracking/#using-groups","title":"Using Groups","text":"<p>Use groups to organise your trackers. You can move a tracker to a group using the trackers context menu:</p> <p></p>"},{"location":"tutorial/tracking/#quick-tracking-groups","title":"Quick Tracking Groups","text":"<p>When you have multiple trackers in a group you can use the quick track button to quickly track them all at once:</p> <p></p>"},{"location":"tutorial/tracking/#reordering-group-items","title":"Reordering Group Items","text":"<p>You can also reorder items in a group by holding down and dragging them: </p> <p></p>"},{"location":"tutorial/tracking/#managing-data-points","title":"Managing Data Points","text":"<p>To view, edit and delete your data points tap on the center of a tracker:</p> <p></p>"},{"location":"tutorial/tracking/#bulk-editing-data-points","title":"Bulk Editing Data Points","text":"<p>You can edit all the data points for a tracker at once using the edit button in the top right. </p> <p>WARNING: It is recommended that you back up your data before doing so as this will change all your data points at once and can not be undone.</p> <p>The \"Where\" section allows you to specify which data points you want to update. Any data points that match any of the input data will be updated. For example if you check value and input 56, then any data point that has a value of 56 will be updated. If you check label and input \"Small\" then any data point with the label \"Small\" will be updated (this is case sensitive so \"Small\" will not match \"small\"). If you check both value and label, then only data points with both the given value and the given label will be updated. </p> <p></p>"},{"location":"tutorial/tracking/#advanced-tracker-options","title":"Advanced tracker options","text":"<p>When creating a tracker you can set a \"default value\" for that tracker. If you do this you will not be asked for a value when you tap the + button. Instead the default value will immediately be tracked at the current time. You can still track a custom value by long pressing the + button on the tracker.</p> <p></p> <p>If you want to change the behaviour of the suggested values you can do so using the suggestions type and order settings. When you tap a suggested value the value and label fields are filled out and the data point is tracked immediately provided you are using the \"Value only\" or \"Value and Label\" suggestion type. Otherwise the dialog will simply fill the label field and allow you to input a value.</p> <p>If you are using \"Value and Label\" or \"Value only\" then long pressing the button will fill out the fields without tracking immediately. If you are using \"Label only\" then long pressing will track the label immediately with a value of 1.</p> <p>By default only previously tracked labels are used to create suggestions and the suggested labels are sorted alphabetically.</p> <p></p>"},{"location":"tutorial/graphs/","title":"Track &amp; Graph - Graphs and Statistics","text":"<p>For help setting graphs please see the tutorial on each graph type below.</p> <ul> <li>Line Graphs</li> <li>Bar Charts</li> <li>Pie Charts</li> <li>Average Time Between and Last Tracked/Time Since</li> <li>Time Histograms</li> <li>Lua Scripts</li> </ul>"},{"location":"tutorial/graphs/bar-charts/","title":"Bar charts","text":"<p>Bar charts in Track &amp; Graph provide a visual representation of how your tracked data fluctuates over time. While they share similarities with line graphs, bar charts offer an additional feature: displaying the ratio of each label, similar to a Pie Chart, within each bar. </p> <p>Let's consider an example where you sell T-Shirts in different sizes: Small, Medium, and Large. Suppose you want to track the daily sales and the distribution of each size. To set up your bar chart select the \"Daily\" option for the bar period like so: </p> <p></p> <p>Now you can create a bar chart like the one below:</p> <p></p>"},{"location":"tutorial/graphs/bar-charts/#configuration","title":"Configuration","text":"<p>If your tracking system assigns a value of 1 for Small, 2 for Medium, and 3 for Large T-Shirts, the bar chart will display the sales of a Large T-Shirt as 3 instead of 1. To rectify this, check the box labeled \"Check here to count the number of data points tracked rather than the total of their values.\" This option ignores the assigned values and counts each data point as 1 on the bar chart.</p> <p>Additionally, you can utilize the scale variable to multiply all the values by a constant factor.</p>"},{"location":"tutorial/graphs/bar-charts/#understanding-the-bar-chart","title":"Understanding the Bar Chart","text":"<p>After creating your bar chart, you can tap on it to view it in full-screen mode. The notes section below the chart displays any relevant notes from the data points used. Tapping on a note highlights the corresponding bar on the chart and shows more detail.</p> <p></p> <p>The labels are ordered such that the label with the highest cumulative value is first (at the bottom of the bar chart) and the label with the smallest cumulative value is last (at the top of the bar chart)</p>"},{"location":"tutorial/graphs/histograms/","title":"Time histograms","text":"<p>Histograms are useful for showing how data is distributed over a given domain. Time histograms in Track &amp; Graph allow you to see how your data is distributed over various time periods.</p> <p>For example imagine you had tracked 7 weeks worth of data on how much time you spent reading. You may wish to know on what days during the week do you typically spend the most time reading. Here you could use a time histogram with the following setup:</p> <p></p> <p>To generate the following histogram:</p> <p></p>"},{"location":"tutorial/graphs/histograms/#how-histograms-are-calculated","title":"How Histograms Are Calculated","text":"<p>The histogram is calculated simply by taking every data point within the sample and adding its value to a bin based on which day of the week that value was tracked. So the day 1 bin represents the total of all data points tracked on Mondays divided by the total of all data points in the sample. Histograms are normalised meaning that the sum of all the heights of the bars (or the area under the graph) should add up to exactly 1. So for example if you only ever read on Fridays you would expect your histogram to only show one bar for Friday with height 1.</p> <p></p> <p>If you read on Saturday 50% of the time and on Friday 50% of the time you would expect your histogram to look like this:</p> <p></p>"},{"location":"tutorial/graphs/histograms/#working-with-labeled-data","title":"Working with Labeled Data","text":"<p>If the data you are tracking has labels then Track &amp; Graph will show you the distribution within each bar of the amount made up by each label tracked like so:</p> <p></p> <p>By default the height of each bar is relative to the sum of all the data point values that fall in that time range. However if the weight of each of your data points should be the same regardless of its value then your histogram may be incorrectly skewed.</p> <p>To fix this you can check the box marked: \"Check here to count the number of data points tracked rather than the total of their values.\"</p> <p>This way each data point will be regarded as having the same weight in the histogram.</p>"},{"location":"tutorial/graphs/histograms/#accuracy-over-time","title":"Accuracy over Time","text":"<p>One final note to bare in mind is that your data may be skewed by the fact that you have not tracked data for each histogram bin yet or have not tracked them all equally yet. So for example if you are drawing a yearly histogram but have only been tracking for 6 months then your histogram may look like this:</p> <p></p> <p>And a year later it may look like this:</p> <p></p> <p>Over time however this skew will tend to 0. Therefore the more data you have tracked the more accurate the histogram will be.</p>"},{"location":"tutorial/graphs/line/","title":"Line graphs","text":""},{"location":"tutorial/graphs/line/#creating-a-line-graph","title":"Creating a Line Graph","text":"<p>To create a line graph use the + icon in a group and create a graph. Select line graph and give your graph a name.</p> <p></p>"},{"location":"tutorial/graphs/line/#time-window-configuration","title":"Time Window Configuration","text":"<p>To control the window of time that this graph will show on the X axis use the Sample size and sample ending at controls. By default line graphs always end at the last data point and will update automatically as you track more data. If you want to fix your graph at a certain point in time you can change \"Sample ending at\" to a custom date. </p> <p></p>"},{"location":"tutorial/graphs/line/#adding-lines-to-your-graph","title":"Adding Lines to Your Graph","text":"<p>Next add one or more lines to your graph by tapping the + bar at the bottom:</p> <p></p> <p>The name at the top will be shown in the graph key, it defaults to the name of the feature. </p> <p>On the left you can select the colour of the line and the style of the line. </p> <p>In the middle there are 3 inputs: </p> <ul> <li>At the top is the feature. If you tap this box you can select a feature, by it's path from the root group to the feature.</li> <li>Next is the averaging period. If you select an averaging period each data point on the line will show as the mean of its self and all data points within the selected period prior. </li> <li>Finally is the plot total setting. This will be explained more below but essentially it will force the line to have a regular distribution of points on the X axis and will use the sum of all data points in the given period as the value on the Y axis. At the bottom is the Offset and Scale. </li> </ul>"},{"location":"tutorial/graphs/line/#understanding-data-processing-order","title":"Understanding Data Processing Order","text":"<p>The order of operations is as follows: </p> <ol> <li>First your data is converted to totals using the plot total setting</li> <li>Then each point is converted to its moving average using the moving average setting</li> <li>Then each point is multiplied by the scale value</li> <li>Finally the offset is added, shifting the entire line up or down on the Y axis</li> </ol>"},{"location":"tutorial/graphs/line/#plot-totals-and-moving-averages","title":"Plot totals and Moving averages","text":"<p>If for example you were to track when ever you exercise using only a value of 1 like so: </p> <p></p> <p>You would find when you came to draw a graph of that data that the line draws simply as a straight line at the point 1 on the Y axis: </p> <p></p> <p>What you are most likely interested in is how many times you exercised each day, week, or month. To draw this line instead change the plot total setting from \"Plot when tracked\" to for example \"Daily total\". This setting will take the total of all values tracked per day and plot that on the graph with one point at the end of each day.</p> <p></p> <p>This graph is quite precise but still far too noisy to really make sense of. The line mostly jumps between values of 1 and 0. However if you now change the moving average setting to weekly you can see something more helpful: </p> <p></p> <p>Don't forget the data is first converted to periodic totals and then a moving average of those totals.</p>"},{"location":"tutorial/graphs/line/#combining-multiple-data-series","title":"Combining Multiple Data Series","text":"<p>You can add multiple lines to the same graph to get a better overview of your data.</p> <p></p> <p></p>"},{"location":"tutorial/graphs/pie/","title":"Pie charts","text":"<p>Pie charts can be set up from the create graph or stat menu. The segments are simply one per label in the selected feature. </p> <p>The size of the segment is proportional to the number of data points with that label. </p> <p>By default the size of each segment is proportional to the sum of the values tracked for that label. You can change this behaviour by checking the box to count the number of data points rather than the total of their values.</p> <p></p>"},{"location":"tutorial/graphs/statistics/","title":"Statistics","text":"<p>Currently there are only a couple of built in supported statistics: \"Average time between\" and \"Last Tracked/Time since\". For more powerful statistics see Lua graphs</p> <p>Both present you with the following interface: </p> <p></p> <p>First select a data set and then optionally add filters for label and value range. For example if you want to know the average time between tracking \"Yes\" for /Daily/Rest you can add the label filter and select \"Yes\".</p> <p></p> <p>The statistics are calculated in the following ways:</p> <ul> <li>Average time between shows the duration between the first and last data point matching all filters in the feature divided by the number of data points matching all features minus 1 <code>(last-first)/(size - 1)</code></li> <li>Last Tracked/Time since last shows the last data point matching all filters and also the time since that data point was tracked</li> </ul> <p></p>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/","title":"Lua Graphs and Statistics","text":"<p>Lua graphs are more powerful and flexible than the other graph types. A lua graph is a script written in the lua programming language that returns a data structure that Track &amp; Graph can render. The lua graph can be configured with named data sources that the script can read from when it is executed. For example we could re-create the Last Tracked statistic by adding a single data source and then using this script:</p> <pre><code>return function(sources)\n  local _, first = next(sources)\n  if not first then\n    return nil\n  end\n  return require(\"tng.graph\").data_point(first.dp())\nend\n</code></pre> <p>Don't worry if that seems a bit complicated, there are many scripts already written for you over at the community script hub. </p> <p>If you would like to learn how to write your own scripts check out the developer guides.</p>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#community-scripts","title":"Community Scripts","text":"<p>You can get directly there by tapping the \"GitHub\" button in the app. Once there if you find a script you want to use you can tap the \"Install via deeplink\" button and you will be returned to the app with the script already installed: </p> <p></p>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#configuration","title":"Configuration","text":"<p>Most of the scripts have some configuration parameters near the top. Currently you will need to modify these manually to configure the script. Below is a guide for working with the different data types you'll encounter in Lua scripts.</p>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#basic-data-types","title":"Basic Data Types","text":"<p>When configuring Lua scripts, you'll need to understand how to provide different types of values:</p>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#numbers","title":"Numbers","text":"<pre><code>local number = 42           -- integers\nlocal decimal = 3.14        -- floating point numbers\nlocal negative = -10        -- negative numbers\n</code></pre>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#strings","title":"Strings","text":"<pre><code>local string = \"Hello\"      -- double quotes\nlocal string2 = 'World'     -- single quotes work too\n</code></pre>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#booleans","title":"Booleans","text":"<pre><code>local truth = true          -- true value\nlocal falsehood = false     -- false value\n</code></pre>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#tableslists","title":"Tables/Lists","text":"<pre><code>local emptyList = {}                           -- empty list\nlocal numberList = {1, 2, 3, 4}                -- list of numbers\nlocal stringList = {\"small\", \"medium\"}         -- list of strings\nlocal colorList = {\"#FF0000\", core.COLOR.BLUE} -- list of colors\n</code></pre>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#nil","title":"nil","text":"<pre><code>local nothing = nil         -- represents the absence of a value\n</code></pre>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#comments","title":"Comments","text":"<pre><code>-- Anything after -- is a comment and will be ignored by the interpreter\n--[[\n  This is a multi-line comment\n  It can span multiple lines\n]]\n</code></pre>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#durations","title":"Durations","text":"<p>A duration is just a number of milliseconds. There are constants defined for you for convenience:</p> <pre><code>core.DURATION.SECOND\ncore.DURATION.MINUTE\ncore.DURATION.HOUR\ncore.DURATION.DAY\ncore.DURATION.WEEK\n</code></pre> <p>It is also valid to perform arithmetic on a duration e.g.</p> <pre><code>(core.DURATION.MINUTE * 5 + 8 -2) / 3\n</code></pre>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#periods","title":"Periods","text":"<p>A period is slightly different to a duration because it can have a variable number of milliseconds. For example a month does not have a fixed number of days, and a day may have a different number of hours due to daylight savings. The period constants defined are:</p> <pre><code>core.PERIOD.DAY\ncore.PERIOD.WEEK\ncore.PERIOD.MONTH\ncore.PERIOD.YEAR\n</code></pre> <p>It is not valid to use arithmetic operations on a period. For example <code>core.PERIOD.MONTH * 5</code> is not valid. For this reason a script that uses a period in the config will often accept a multiplier for that period as a separate parameter. So if you want to represent something like 5 months you might provide the following configuration.</p> <pre><code>local period = core.PERIOD.MONTH\nlocal period_multiplier = 5\n</code></pre>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#colors","title":"Colors","text":"<p>For colors you can use any hex value such as <code>#FF0000</code> or <code>#00FF00</code> like so:</p> <pre><code>local color = \"#FF0000\"\n</code></pre> <p>You can also use the following named colors from Track &amp; Graph's default colour palette:</p> Constant Hex Value Color Sample <code>core.COLOR.RED_DARK</code> <code>#A50026</code> <code>core.COLOR.RED</code> <code>#D73027</code> <code>core.COLOR.ORANGE_DARK</code> <code>#F46D43</code> <code>core.COLOR.ORANGE</code> <code>#FDAE61</code> <code>core.COLOR.YELLOW</code> <code>#FEE090</code> <code>core.COLOR.BLUE_LIGHT</code> <code>#E0F3F8</code> <code>core.COLOR.BLUE_SKY</code> <code>#ABD9E9</code> <code>core.COLOR.BLUE</code> <code>#74ADD1</code> <code>core.COLOR.BLUE_DARK</code> <code>#4575B4</code> <code>core.COLOR.BLUE_NAVY</code> <code>#313695</code> <code>core.COLOR.GREEN_LIGHT</code> <code>#54D931</code> <code>core.COLOR.GREEN_DARK</code> <code>#1B8200</code>"},{"location":"tutorial/graphs/lua-graphs/lua-graphs/#disabling-lua","title":"Disabling Lua","text":"<p>It should be hard to write a script that crashes the app, but if you do you can start the app without the lua engine enabled by long pressing on the app launcher and selecting \"Launch Lua disabled\". You will still see the cards for the Lua graphs you created so you can delete or edit them before restarting the app again.</p>"}]}